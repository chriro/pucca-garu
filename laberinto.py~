#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Módulos
# Módulos
import sys, pygame
from pygame.locals import *



class Laberinto(pygame.sprite.Sprite):
    	def __init__(self, mapa="laberinto.txt"):
		self.mapa = leerMapa(mapa)
		self.fil = len(self.mapa)
		self.col = len(self.mapa[0])
#		self.sal = self.buscarJugador(3)
		#self.mapa[self.sal[0]][self.sal[1]] = 1
		
	def __str__(self):
		mapa = ""
		for f in range(self.filas):
			for c in range(self.columnas):
				if self.mapa[f][c] == 0:
					mapa += "# "
				if self.mapa[f][c] == 1:
					mapa += ". "
				if self.mapa[f][c] == 2:
					mapa += "S "
				if self.mapa[f][c] == 3:
					mapa += "T "

			mapa += "\n"
		return mapa

	def convertir(self):
		pygame.sprite.Sprite.__init__(self)
		self.cesped = load_image("images/cesped.png")
		self.cesped_rect = self.cesped.get_rect()
		
		self.tronco = load_image("images/tronco.png", 1)
		self.tronco_rect = self.tronco.get_rect()

	
	def dibujar(self, screen):
		for f in range(self.fil):
			for c in range(self.col):
				screen.blit(self.cesped, (self.cesped_rect.w*c, self.cesped_rect.h*f))
		for i in range(len(self.salida)):
			screen.blit(self.salida[i][0], self.salida[i][1])
   
 
# Funciones
# ---------------------------------------------------------------------
 
# Quita el ultimo caracter de una lista.
def quitarUltimo(lista):
    for i in range(len(lista)):
        lista[i] = lista[i][:-1]
    return lista
 
# Covierte una cadena en una lista.
def listarCadena(cadena):
    lista = []
    for i in range(len(cadena)):
        if cadena[i] == ".":
            lista.append(0)
        if cadena[i] == "#":
            lista.append(1)
        if cadena[i] == "S":
            lista.append(2)
    return lista
 
# Lee un archivo de texto y lo convierte en una lista.
def leerMapa(archivo):
    mapa = open("laberinto.txt", "r")
    mapa = mapa.readlines()
    mapa = quitarUltimo(mapa)
    for i in range(len(mapa)):
        mapa[i] = listarCadena(mapa[i])
    return mapa
 




# Carga una imagen a Pygame
def load_image(filename, transparent=False):
        try: image = pygame.image.load(filename)
        except pygame.error, message:
                raise SystemExit, message
        image = image.convert()
        if transparent:
                color = image.get_at((0,0))
                image.set_colorkey(color, RLEACCEL)
        return image
         
def salir(keys):
    for eventos in pygame.event.get():
        if eventos.type == QUIT:
            sys.exit(0)
        if keys[K_ESCAPE]:
            sys.exit(0)
 
